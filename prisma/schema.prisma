// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // Si usas OAuth, puede ser null
  createdAt DateTime @default(now())
  batches   Batch[]
  templates Template[]
  subscriptions Subscription[]
  payments  Payment[]
  customerId String? // Stripe Customer ID
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String   // URL de la plantilla subida
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  batches     Batch[]
}

model Batch {
  id          String   @id @default(cuid())
  name        String   // Nombre del lote (ej: "Tarjetas Evento XYZ")
  description String?
  quantity    Int      // Cantidad de tarjetas en el lote
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  codes       Code[]
  paid        Boolean  @default(false) // Si el lote ha sido pagado
  paymentId   String?  // ID del pago asociado
}

model Code {
  id        String   @id @default(cuid())
  code      String   @unique // Código legible (ej: ABC123)
  hash      String   @unique // Hash único para QR
  number    Int      // Número secuencial en el lote
  batch     Batch    @relation(fields: [batchId], references: [id])
  batchId   String
  createdAt DateTime @default(now())
  scans     Scan[]   // Estadísticas de uso
  active    Boolean  @default(true)
  uses      Int?     @default(0)
}

model Scan {
  id        String   @id @default(cuid())
  code      Code     @relation(fields: [codeId], references: [id])
  codeId    String
  ipAddress String?
  userAgent String?
  scannedAt DateTime @default(now())
}

// Modelos para el sistema de pagos
model PricingPlan {
  id          String   @id @default(cuid())
  name        String   // ej: "Básico", "Pro", "Empresa"
  description String?
  type        PlanType // SUBSCRIPTION o ONE_TIME
  price       Float    // Precio en euros (o tu moneda)
  currency    String   @default("EUR")
  features    Json     // Array de características ["Hasta 100 tarjetas", "Soporte básico"]
  maxBatches  Int?     // Límite de lotes (null = ilimitado)
  maxCards    Int?     // Límite de tarjetas (null = ilimitado)
  duration    Int?     // Duración en días (para suscripciones)
  active      Boolean  @default(true)
  stripeProductId String? // ID del producto en Stripe
  stripePriceId   String? // ID del precio en Stripe
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
  payments      Payment[]
}

model Subscription {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  plan        PricingPlan @relation(fields: [planId], references: [id])
  planId      String
  status      SubStatus   @default(ACTIVE)
  startDate   DateTime    @default(now())
  endDate     DateTime?   // null para suscripciones indefinidas
  stripeSubscriptionId String? // ID de la suscripción en Stripe
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payment {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  plan        PricingPlan? @relation(fields: [planId], references: [id])
  planId      String?
  amount      Float       // Cantidad pagada
  currency    String      @default("EUR")
  status      PayStatus   @default(PENDING)
  type        PaymentType // SUBSCRIPTION o ONE_TIME
  stripePaymentIntentId String? // ID del pago en Stripe
  stripeSessionId       String? // ID de la sesión de checkout
  description String?     // Descripción del pago
  metadata    Json?       // Datos adicionales
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Enums
enum PlanType {
  SUBSCRIPTION
  ONE_TIME
}

enum SubStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAUSED
}

enum PayStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  SUBSCRIPTION
  ONE_TIME
  BATCH_PAYMENT
}
