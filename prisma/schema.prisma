// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // Si usas OAuth, puede ser null
  createdAt DateTime @default(now())
  batches   Batch[]
  templates Template[]
  customers Customer[]
  cards     Card[]
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String   // URL de la plantilla subida
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  batches     Batch[]
  
  // Configuraciones de Passbook
  passbookConfig PassbookConfig?
}

model PassbookConfig {
  id          String   @id @default(cuid())
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String   @unique
  
  // Configuración general
  businessName        String?
  businessLogo        String?  // URL del logo
  
  // Colores personalizados
  backgroundColor     String   @default("rgb(227, 242, 253)")  // Azul por defecto para fidelidad
  foregroundColor     String   @default("rgb(0, 0, 0)")
  labelColor          String   @default("rgb(25, 118, 210)")
  
  // Configuración específica por tipo de tarjeta
  fidelityConfig      FidelityPassbookConfig?
  prepaidConfig       PrepaidPassbookConfig?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FidelityPassbookConfig {
  id                String         @id @default(cuid())
  passbookConfig    PassbookConfig @relation(fields: [passbookConfigId], references: [id], onDelete: Cascade)
  passbookConfigId  String         @unique
  
  // Colores específicos para fidelidad
  backgroundColor   String         @default("rgb(227, 242, 253)")  // Azul suave
  labelColor        String         @default("rgb(25, 118, 210)")   // Azul
  
  // Configuración de progreso
  totalUses         Int            @default(11)
  progressText      String         @default("Progreso")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrepaidPassbookConfig {
  id                String         @id @default(cuid())
  passbookConfig    PassbookConfig @relation(fields: [passbookConfigId], references: [id], onDelete: Cascade)
  passbookConfigId  String         @unique
  
  // Colores específicos para prepago
  backgroundColor   String         @default("rgb(232, 245, 232)")  // Verde suave
  labelColor        String         @default("rgb(46, 125, 50)")    // Verde
  
  // Configuración de usos
  initialUses       Int            @default(10)
  remainingText     String         @default("Restantes")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batch {
  id          String   @id @default(cuid())
  name        String   // Nombre del lote (ej: "Tarjetas Evento XYZ")
  description String?
  quantity    Int      // Cantidad de tarjetas en el lote
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  codes       Code[]
}

model Code {
  id        String   @id @default(cuid())
  code      String   @unique // Código legible (ej: ABC123)
  hash      String   @unique // Hash único para QR
  number    Int      // Número secuencial en el lote
  batch     Batch    @relation(fields: [batchId], references: [id])
  batchId   String
  createdAt DateTime @default(now())
  scans     Scan[]   // Estadísticas de uso
  active    Boolean  @default(true)
  uses      Int?     @default(0)
}

model Scan {
  id        String   @id @default(cuid())
  code      Code     @relation(fields: [codeId], references: [id])
  codeId    String
  ipAddress String?
  userAgent String?
  scannedAt DateTime @default(now())
}

// Nuevos modelos para el sistema de clientes y tarjetas individuales
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  cards     Card[]
  createdAt DateTime @default(now())
}

model Card {
  id            String   @id @default(cuid())
  code          String   @unique // Código legible
  hash          String   @unique // Hash único para QR
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  
  // Tipo de tarjeta
  type          CardType @default(FIDELITY)
  
  // Para tarjetas de fidelidad
  totalUses     Int?     // Total de usos (ej: 11 para café gratuito)
  currentUses   Int      @default(0) // Usos actuales
  
  // Para tarjetas prepago
  initialUses   Int?     // Usos iniciales (ej: 10)
  remainingUses Int?     // Usos restantes
  
  active        Boolean  @default(true)
  scans         CardScan[]
  createdAt     DateTime @default(now())
}

model CardScan {
  id        String   @id @default(cuid())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  ipAddress String?
  userAgent String?
  scannedAt DateTime @default(now())
}

enum CardType {
  FIDELITY  // Sistema de fidelidad (ej: 11 cafés = 1 gratis)
  PREPAID   // Sistema prepago (ej: 10 usos regalados)
}
